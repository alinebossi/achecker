<?php
/************************************************************************/
/* AChecker                                                             */
/************************************************************************/
/* Copyright (c) 2008 - 2011                                            */
/* Inclusive Design Institute                                           */
/*                                                                      */
/* This program is free software. You can redistribute it and/or        */
/* modify it under the terms of the GNU General Public License          */
/* as published by the Free Software Foundation.                        */
/************************************************************************/
// $Id$

define('AC_INCLUDE_PATH', '../include/');
include(AC_INCLUDE_PATH.'vitals.inc.php');
include_once(AC_INCLUDE_PATH.'classes/Utility.class.php');
include_once(AC_INCLUDE_PATH.'classes/DAO/MonitorDAO.class.php');
include_once(AC_INCLUDE_PATH.'classes/DAO/MonitorResultDAO.class.php');
include_once(AC_INCLUDE_PATH.'classes/DAO/UserLinksDAO.class.php');

$MonitorDAO = new MonitorDAO();
$userLinksDAO = new UserLinksDAO();

$monitor_rows = $MonitorDAO->getMonitorsAuto();

if (is_array($monitor_rows))
{
	include(AC_INCLUDE_PATH. "classes/AccessibilityValidator.class.php");
	require(AC_INCLUDE_PATH . 'classes/phpmailer/acheckermailer.class.php');
	
	foreach ($monitor_rows as $monitor)
	{
		echo "URL: ".$monitor["URL"].PHP_EOL;
		
		$has_enough_memory = true;
		
		$uri = Utility::getValidURI($addslashes($monitor["URL"]));
		
		// Check if the given URI is connectable
		if ($uri === false)
		{
			$msg->addError(array('CANNOT_CONNECT', $monitor["URL"]));
		}
		
		// don't accept localhost URI
		if (stripos($uri, '://localhost') > 0)
		{
			$msg->addError('NOT_LOCALHOST');
		}
		
		$validate_content = @file_get_contents($uri);
		
		if (isset($validate_content) && !Utility::hasEnoughMemory(strlen($validate_content)))
		{
			$msg->addError('NO_ENOUGH_MEMORY');
			$has_enough_memory = false;
		}
		$guid_id = array($monitor["guideline_id"]);
	
	
		if (isset($validate_content) && $has_enough_memory && !$msg->containsErrors())
		{
			$aValidator = new AccessibilityValidator($validate_content, $guid_id, $uri);
			$aValidator->validate();
			
			$num_of_total_a_errors = $aValidator->getNumOfValidateError();
			$errors = $aValidator->getValidationErrorRpt();
			
			$user_link_id = $userLinksDAO->getUserLinkID($monitor['user_id'], $uri, $guid_id);
			
			$MonitorResultDAO = new MonitorResultDAO();
			$MonitorResultDAO->create(AC_AUTO, $monitor['monitor_id'], $guid_id, $user_link_id, $num_of_total_a_errors, $errors);
			
			if (!$msg->containsErrors())
			{
				$MonitorResultDAO->generateRpt();
			}
			
			if (!$msg->containsErrors())
			{
				$msg->addFeedback('ACTION_COMPLETED_SUCCESSFULLY');
			}
		}	
		
		if (defined('AC_EMAIL_CHECK') && AC_EMAIL_CHECK) 
		{
			/* send the email confirmation message: */		
			$mail = new ACheckerMailer();

			$mail->From     = $_config['contact_email'];
			$mail->AddAddress($monitor["email"]);
			$mail->Subject = SITE_NAME . ' - ' . _AC('email_check_subject_auto');
			if (!$msg->containsErrors())
			{
				$mail->Body    = _AC('email_check_message_auto_success', $monitor["URL"], $MonitorResultDAO->getMonitorID(),$MonitorResultDAO->getResultID())."<br><br>";
			} else {
				$mail->Body    = _AC('email_check_message_auto_unsuccess', $monitor["URL"], $msg->GetAll())."<br><br>";
			}
			$mail->IsHTML(true);
			$mail->Send();
			$mail = null;
		}
		
		echo $msg->GetAll().PHP_EOL;
		$msg->UnsetAll();
	}
} else {
	echo "No monitors to run!";
}

?>